### Test Consumer Functionality

### First, start the services:
# 1. Start Kafka and Zookeeper
# 2. Start officer-service (port 8083)
# 3. Start borrower-service (port 4001)

### Create a test borrower in borrower service
POST http://localhost:4001/api/borrowers
Content-Type: application/json

{
    "firstName": "John",
    "lastName": "Doe", 
    "email": "john.doe@example.com",
    "phoneNumber": "123-456-7890",
    "dateOfBirth": "1990-01-01",
    "ssn": "123-45-6789",
    "address": {
        "street": "123 Main St",
        "city": "Anytown",
        "state": "CA",
        "zipCode": "12345"
    },
    "employmentDetails": {
        "employer": "Tech Corp",
        "position": "Software Engineer",
        "annualIncome": 75000,
        "employmentStartDate": "2020-01-01"
    }
}

### Create a test loan application in borrower service
POST http://localhost:4001/api/borrowers/1/loan-applications
Content-Type: application/json

{
    "loanType": "Personal Loan",
    "loanAmount": 10000,
    "loanTermMonths": 36,
    "interestRate": 5.5,
    "purpose": "Home improvement"
}

### Create a test document in borrower service  
POST http://localhost:4001/api/borrowers/1/documents
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="documentName"

ID Document
--boundary
Content-Disposition: form-data; name="documentType"

ID_PROOF
--boundary
Content-Disposition: form-data; name="description"

Driver's License
--boundary
Content-Disposition: form-data; name="file"; filename="id.jpg"
Content-Type: image/jpeg

(file content here)
--boundary--

### Now test the officer service status updates (these should trigger consumer events)

### Update loan status via officer service - this should trigger borrower consumer
PUT http://localhost:8083/api/admin/loans/1/status
Content-Type: application/json

{
    "newStatus": "UNDER_REVIEW",
    "updatedBy": "officer123"
}

### Update document status via officer service - this should trigger borrower consumer  
PUT http://localhost:8083/api/admin/documents/1/status
Content-Type: application/json

{
    "newStatus": "UNDER_REVIEW", 
    "updatedBy": "reviewer456"
}

### Verify the status was updated in borrower service
GET http://localhost:4001/api/borrowers/1/loan-applications

### Verify the document status was updated in borrower service
GET http://localhost:4001/api/borrowers/1/documents

### Test multiple status updates to ensure proper overwriting
PUT http://localhost:8083/api/admin/loans/1/status
Content-Type: application/json

{
    "newStatus": "APPROVED",
    "updatedBy": "manager789"
}

### Verify final status
GET http://localhost:4001/api/borrowers/1/loan-applications

### Expected behavior:
# 1. Officer service publishes events to Kafka when status is updated
# 2. Borrower service consumes events and updates local status 
# 3. Only processes events for the correct borrower (security check)
# 4. Status is overwritten, not concatenated
# 5. Officer ID is tracked in the event data
